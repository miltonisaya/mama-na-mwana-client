{"ast":null,"code":"import { MatDialogConfig } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { OrganisationUnitDialogComponent } from './modals/organisation-unit-dialog-component';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./organisation-unit.service\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"../notifications/notifier.service\";\nimport * as i4 from \"@angular/flex-layout/flex\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/tree\";\nconst _c0 = [\"deleteDialog\"];\n\nfunction OrganisationUnitComponent_mat_tree_node_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 11);\n    i0.ɵɵelement(1, \"button\", 12);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r5 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", node_r5.name, \" \");\n  }\n}\n\nfunction OrganisationUnitComponent_mat_tree_node_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 11)(1, \"button\", 13)(2, \"mat-icon\", 14);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r6 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-label\", \"Toggle \" + node_r6.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.treeControl.isExpanded(node_r6) ? \"expand_more\" : \"chevron_right\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", node_r6.name, \" \");\n  }\n}\n\nfunction OrganisationUnitComponent_ng_template_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-dialog-content\")(1, \"h3\");\n    i0.ɵɵtext(2, \"Are you sure you want to delete this organisation unit?\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(3, \"mat-dialog-actions\", 15)(4, \"button\", 16);\n    i0.ɵɵtext(5, \"NO\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 17);\n    i0.ɵɵlistener(\"click\", function OrganisationUnitComponent_ng_template_18_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.delete();\n    });\n    i0.ɵɵtext(7, \"YES\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nexport let OrganisationUnitComponent = /*#__PURE__*/(() => {\n  class OrganisationUnitComponent {\n    constructor(OrganisationUnitService, dialog, notifierService) {\n      this.OrganisationUnitService = OrganisationUnitService;\n      this.dialog = dialog;\n      this.notifierService = notifierService;\n      this.treeControl = new FlatTreeControl(node => node.level, node => node.expandable);\n\n      this._transformer = (node, level) => {\n        return {\n          expandable: !!node.children && node.children.length > 0,\n          name: node.name,\n          level: level\n        };\n      };\n\n      this.treeFlattener = new MatTreeFlattener(this._transformer, node => node.level, node => node.expandable, node => node.children); // treeControl = new NestedTreeControl<OrganisationUnit>(node => node.children);\n      // dataSource = new MatTreeNestedDataSource<OrganisationUnit>();\n\n      this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n      this.hasChild = (_, node) => node.expandable; // @ts-ignore\n\n    }\n\n    ngOnInit() {\n      this.getParentOrganisationUnits();\n    }\n    /**\n     * This method returns the parent organisation units\n     */\n\n\n    getParentOrganisationUnits() {\n      return this.OrganisationUnitService.getOrganisationUnits().subscribe(response => {\n        this.dataSource.data = response.data;\n      }, error => {\n        this.notifierService.showNotification(error.message, 'OK', 'error');\n        console.log(error);\n      });\n    }\n\n    applyFilter(event) {\n      const filterValue = event.target.value; // this.dataSource.data.filter = filterValue.trim().toLowerCase();\n    }\n\n    openDialog(data) {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n\n      if (data) {\n        const roleData = {\n          id: data.id,\n          name: data.name,\n          description: data.description\n        };\n        this.OrganisationUnitService.populateForm(roleData);\n        this.dialog.open(OrganisationUnitDialogComponent, dialogConfig).afterClosed().subscribe(() => {\n          this.getParentOrganisationUnits();\n        });\n      } else {\n        dialogConfig.data = {};\n        this.dialog.open(OrganisationUnitDialogComponent, dialogConfig).afterClosed().subscribe(() => {\n          this.getParentOrganisationUnits();\n        });\n      }\n    }\n\n    openDeleteDialog(id) {\n      this.organisationUnitId = id;\n      this.dialog.open(this.deleteDialog).afterClosed().subscribe(() => {\n        this.getParentOrganisationUnits();\n      });\n    }\n\n    delete() {\n      this.OrganisationUnitService.delete(this.organisationUnitId).subscribe(response => {\n        this.notifierService.showNotification(response.message, 'OK', 'success');\n      }, error => {\n        this.notifierService.showNotification(error.message, 'OK', 'error');\n      });\n      this.dialog.closeAll();\n    }\n\n  }\n\n  OrganisationUnitComponent.ɵfac = function OrganisationUnitComponent_Factory(t) {\n    return new (t || OrganisationUnitComponent)(i0.ɵɵdirectiveInject(i1.OrganisationUnitService), i0.ɵɵdirectiveInject(i2.MatDialog), i0.ɵɵdirectiveInject(i3.NotifierService));\n  };\n\n  OrganisationUnitComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: OrganisationUnitComponent,\n    selectors: [[\"app-users\"]],\n    viewQuery: function OrganisationUnitComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(MatPaginator, 5);\n        i0.ɵɵviewQuery(MatSort, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.deleteDialog = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paginator = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);\n      }\n    },\n    decls: 20,\n    vars: 3,\n    consts: [[\"fxFlexLayoutAlign\", \"row\", \"fxLayoutAlign\", \"space-between center\"], [\"fxLayoutGap\", \"5px\"], [\"mat-raised-button\", \"\", 1, \"mat-primary\", 3, \"click\"], [\"appearance\", \"standard\"], [\"matInput\", \"\", \"autocomplete\", \"off\", 3, \"keyup\"], [\"input\", \"\"], [1, \"mat-elevation-z8\"], [3, \"dataSource\", \"treeControl\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"deleteDialog\", \"\"], [\"matTreeNodePadding\", \"\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"], [1, \"mat-icon-rtl-mirror\"], [\"align\", \"end\"], [\"mat-button\", \"\", \"mat-dialog-close\", \"\"], [\"mat-button\", \"\", 3, \"click\"]],\n    template: function OrganisationUnitComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\")(2, \"h3\");\n        i0.ɵɵtext(3, \"Manage Organisation Units\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"div\", 1)(5, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function OrganisationUnitComponent_Template_button_click_5_listener() {\n          return ctx.openDialog();\n        });\n        i0.ɵɵelementStart(6, \"mat-icon\");\n        i0.ɵɵtext(7, \"add\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(8, \"ADD NEW \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(9, \"mat-form-field\", 3)(10, \"mat-label\");\n        i0.ɵɵtext(11, \"Filter\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"input\", 4, 5);\n        i0.ɵɵlistener(\"keyup\", function OrganisationUnitComponent_Template_input_keyup_12_listener($event) {\n          return ctx.applyFilter($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(14, \"div\", 6)(15, \"mat-tree\", 7);\n        i0.ɵɵtemplate(16, OrganisationUnitComponent_mat_tree_node_16_Template, 3, 1, \"mat-tree-node\", 8);\n        i0.ɵɵtemplate(17, OrganisationUnitComponent_mat_tree_node_17_Template, 5, 3, \"mat-tree-node\", 9);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(18, OrganisationUnitComponent_ng_template_18_Template, 8, 0, \"ng-template\", null, 10, i0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(15);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n      }\n    },\n    directives: [i4.DefaultLayoutAlignDirective, i4.DefaultLayoutGapDirective, i5.MatButton, i6.MatIcon, i7.MatFormField, i7.MatLabel, i8.MatInput, i9.MatTree, i9.MatTreeNodeDef, i9.MatTreeNode, i9.MatTreeNodePadding, i9.MatTreeNodeToggle, i2.MatDialogContent, i2.MatDialogActions, i2.MatDialogClose],\n    styles: [\"table[_ngcontent-%COMP%]{width:100%}.mat-form-field[_ngcontent-%COMP%]{font-size:14px;width:100%}.mat-tree[_ngcontent-%COMP%]{padding-left:40px;align-content:center}.ou-tree-invisible[_ngcontent-%COMP%]{display:none}.ou-tree[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%], .ou-tree[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{margin-top:0;margin-bottom:0;list-style-type:none;font-size:x-small}.ou-tree[_ngcontent-%COMP%]   .mat-nested-tree-node[_ngcontent-%COMP%]   div[role=group][_ngcontent-%COMP%]{padding-left:40px}.ou-tree[_ngcontent-%COMP%]   div[role=group][_ngcontent-%COMP%] > .mat-tree-node[_ngcontent-%COMP%]{padding-left:40px}\"]\n  });\n  return OrganisationUnitComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}