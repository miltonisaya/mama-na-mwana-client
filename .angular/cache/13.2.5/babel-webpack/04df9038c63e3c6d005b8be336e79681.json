{"ast":null,"code":"import { environment } from '../../../environments/environment';\nimport { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport const BASE_URL = environment.baseURL;\nexport const RESOURCE_URL = 'api/v1/contacts';\nexport const SYNC_CONTACTS_URL = 'api/v1/sync-contacts';\nexport let ContactsService = /*#__PURE__*/(() => {\n  class ContactsService {\n    constructor(http) {\n      this.http = http;\n      this.API_ENDPOINT = `${BASE_URL}/${RESOURCE_URL}`;\n      this.API_ENDPOINT_TO_SYNC = `${BASE_URL}/${SYNC_CONTACTS_URL}`;\n    }\n    /**\n     * helper function to extract data since\n     * we are not using a type checker in the request\n     * @returns Observable\n     *\n     * @param res\n     */\n\n\n    extractData(res) {\n      const body = res;\n      return body || {};\n    }\n    /**\n     * Get all contacts\n     * @param param\n     */\n\n\n    getContacts(param) {\n      return this.http.get(this.API_ENDPOINT, {\n        params: param\n      }).pipe(map(this.extractData));\n    }\n    /**\n     * Delete contact by id\n     * @param id\n     */\n\n\n    delete(id) {\n      console.log(\"Deleting contact with id \", id);\n      return this.http.delete(this.API_ENDPOINT + \"/\" + id).pipe(map(this.extractData));\n    }\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        console.log(`${operation} failed: ${error.message}`);\n        return of(result);\n      };\n    }\n\n    syncContacts() {\n      return this.http.get(this.API_ENDPOINT_TO_SYNC).pipe(map(this.extractData));\n    }\n\n  }\n\n  ContactsService.ɵfac = function ContactsService_Factory(t) {\n    return new (t || ContactsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ContactsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ContactsService,\n    factory: ContactsService.ɵfac\n  });\n  return ContactsService;\n})();","map":null,"metadata":{},"sourceType":"module"}