{"ast":null,"code":"import { of } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport const BASE_URL = environment.baseURL;\nexport const RESOURCE_URL = 'api/v1/rapidpro-flows';\nexport const SYNC_RESOURCE_URL = 'api/v1/sync-rapidpro-flows';\nexport const FLOW_KEYS_API = 'api/v1/get-rapid-pro-flow-keys-by-flow-id';\nexport const MAP_DATA_ELEMENT_API = 'api/v1/map-data-element';\nexport let FlowKeyService = /*#__PURE__*/(() => {\n  class FlowKeyService {\n    constructor(http) {\n      this.http = http;\n      this.API_ENDPOINT = `${BASE_URL}/${RESOURCE_URL}`;\n      this.SYNC_API_ENDPOINT = `${BASE_URL}/${SYNC_RESOURCE_URL}`;\n      this.KEYS_BY_FLOW_ID_ENDPOINT = `${BASE_URL}/${FLOW_KEYS_API}`;\n      this.MAP_DATA_ELEMENT_ENDPOINT = `${BASE_URL}/${MAP_DATA_ELEMENT_API}`;\n      this.form = new FormGroup({\n        id: new FormControl(''),\n        dataElementId: new FormControl('', [Validators.required]),\n        rapidProFlowId: new FormControl('', [Validators.required])\n      });\n    }\n    /**\n     * helper function to extract data since\n     * we are not using a type checker in the request\n     * @returns Observable\n     *\n     * @param res\n     */\n\n\n    extractData(res) {\n      const body = res;\n      return body || {};\n    }\n\n    getFlows(param) {\n      return this.http.get(this.API_ENDPOINT, {\n        params: param\n      }).pipe(map(this.extractData));\n    }\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        console.log(`${operation} failed: ${error.message}`);\n        return of(result);\n      };\n    }\n\n    syncFlows() {\n      return this.http.get(this.SYNC_API_ENDPOINT).pipe(map(this.extractData));\n    }\n\n    getKeysByFlowId(id) {\n      console.log(\"Params =>\", id);\n      return this.http.get(this.KEYS_BY_FLOW_ID_ENDPOINT + \"/\" + id).pipe(map(this.extractData));\n    }\n    /**\n     *\n     * @param data\n     */\n\n\n    populateForm(data) {\n      this.form.setValue(data);\n    }\n\n    initializeFormGroup() {}\n\n    updateFlowKey(flowKey) {\n      return this.http.put(this.API_ENDPOINT + \"/\" + flowKey.id, flowKey).pipe(tap(_ => console.log(`updated flow key with id=${flowKey.id}`)), catchError(this.handleError('update flow key')));\n    }\n\n    mapDataElement(data) {\n      return this.http.put(this.MAP_DATA_ELEMENT_ENDPOINT, data).pipe(tap(_ => console.log(`Mapped flow key with data element=${data.dataElementId}`)), catchError(this.handleError('Mapped flow key')));\n    }\n\n  }\n\n  FlowKeyService.ɵfac = function FlowKeyService_Factory(t) {\n    return new (t || FlowKeyService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  FlowKeyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FlowKeyService,\n    factory: FlowKeyService.ɵfac\n  });\n  return FlowKeyService;\n})();","map":null,"metadata":{},"sourceType":"module"}