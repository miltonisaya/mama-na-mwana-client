{"ast":null,"code":"import { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormControl } from '@angular/forms';\nimport { map, startWith } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../flowkey.service\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"../../notifications/notifier.service\";\nimport * as i4 from \"../../data-elements/dataElement.service\";\nimport * as i5 from \"@angular/flex-layout/flex\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@angular/material/divider\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/material/autocomplete\";\nimport * as i11 from \"@angular/common\";\nimport * as i12 from \"@angular/material/core\";\nimport * as i13 from \"@angular/material/button\";\n\nfunction FlowKeyDialogComponent_mat_option_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r3.name, \" \");\n  }\n}\n\nexport let FlowKeyDialogComponent = /*#__PURE__*/(() => {\n  class FlowKeyDialogComponent {\n    constructor(flowKeyService, dialogRef, notifierService, dataElementService, data) {\n      this.flowKeyService = flowKeyService;\n      this.dialogRef = dialogRef;\n      this.notifierService = notifierService;\n      this.dataElementService = dataElementService;\n      this.data = data;\n      this.myControl = new FormControl();\n    }\n\n    ngOnInit() {\n      this.getDataElements();\n      this.filteredOptions = this.myControl.valueChanges.pipe(startWith(''), map(value => typeof value === 'string' ? value : value.name), map(name => name ? this._filter(name) : this.dataElements));\n    }\n\n    getDataElements() {\n      let params = {\n        pageSize: 1000\n      };\n      return this.dataElementService.getDataElements(params).subscribe(response => {\n        this.dataElements = response.data.content;\n      }, error => {\n        this.notifierService.showNotification(error.message, 'OK', 'error');\n        console.log(error);\n      });\n    }\n\n    submitForm(data) {\n      if (this.flowKeyService.form.valid) {\n        this.flowKeyService.updateFlowKey(this.flowKeyService.form.value).subscribe(response => {\n          this.notifierService.showNotification(response.message, 'OK', 'success');\n          this.onClose();\n        });\n      }\n    }\n\n    onClose() {\n      this.flowKeyService.form.reset();\n      this.flowKeyService.initializeFormGroup();\n      this.dialogRef.close();\n    }\n\n    mapDataElement() {\n      let data = {\n        dataElementId: this.myControl.value.id,\n        rapidProFlowKeyId: this.data.id\n      };\n      console.log(\"Mapping data ==>\", data);\n      this.flowKeyService.mapDataElement(data).subscribe(response => {\n        if (response.status == '200') {\n          this.notifierService.showNotification(response.message, 'OK', 'success');\n        }\n      }, error => {\n        this.notifierService.showNotification(error, 'OK', 'error');\n        console.log(error);\n      });\n      this.dialogRef.close();\n    }\n\n    displayFn(dataElement) {\n      this.selectedDataElement = dataElement.id;\n      return dataElement && dataElement.name ? dataElement.name : '';\n    }\n\n    _filter(name) {\n      const filterValue = name.toLowerCase();\n      return this.dataElements.filter(option => option.name.toLowerCase().includes(filterValue));\n    }\n\n  }\n\n  FlowKeyDialogComponent.ɵfac = function FlowKeyDialogComponent_Factory(t) {\n    return new (t || FlowKeyDialogComponent)(i0.ɵɵdirectiveInject(i1.FlowKeyService), i0.ɵɵdirectiveInject(i2.MatDialogRef), i0.ɵɵdirectiveInject(i3.NotifierService), i0.ɵɵdirectiveInject(i4.DataElementService), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n  };\n\n  FlowKeyDialogComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FlowKeyDialogComponent,\n    selectors: [[\"app-flow-key-dialog\"]],\n    decls: 22,\n    vars: 9,\n    consts: [[\"fxLayout\", \"row\", \"fxLayout.xs\", \"column\", \"fxFlexFill\", \"\", \"fxLayoutAlign\", \"center center\", 1, \"login-form-container\"], [1, \"form\", 3, \"formGroup\", \"ngSubmit\"], [\"formDirective\", \"ngForm\"], [\"mat-dialog-title\", \"\", 1, \"dialog-header\"], [\"fxLayout\", \"column\", \"fxLayoutGap\", \"5px\", 1, \"dialog-content\"], [\"appearance\", \"fill\", 1, \"dialog-content\"], [\"type\", \"text\", \"matInput\", \"\", 3, \"formControl\", \"matAutocomplete\"], [3, \"displayWith\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"fxLayout\", \"row\", \"fxLayoutAlign\", \"end stretch\"], [1, \"button\"], [\"mat-raised-button\", \"\", \"type\", \"button\", \"mat-dialog-close\", \"\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"click\"], [3, \"value\"]],\n    template: function FlowKeyDialogComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"section\", 0)(1, \"form\", 1, 2);\n        i0.ɵɵlistener(\"ngSubmit\", function FlowKeyDialogComponent_Template_form_ngSubmit_1_listener() {\n          return ctx.submitForm(ctx.flowKeyService.form);\n        });\n        i0.ɵɵelementStart(3, \"h1\", 3);\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"mat-divider\");\n        i0.ɵɵelementStart(6, \"mat-dialog-content\")(7, \"div\", 4)(8, \"mat-form-field\", 5)(9, \"mat-label\");\n        i0.ɵɵtext(10, \"Search for data element\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 6);\n        i0.ɵɵelementStart(12, \"mat-autocomplete\", 7, 8);\n        i0.ɵɵtemplate(14, FlowKeyDialogComponent_mat_option_14_Template, 2, 2, \"mat-option\", 9);\n        i0.ɵɵpipe(15, \"async\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(16, \"mat-dialog-actions\", 10)(17, \"div\", 11)(18, \"button\", 12);\n        i0.ɵɵtext(19, \"CANCEL\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"button\", 13);\n        i0.ɵɵlistener(\"click\", function FlowKeyDialogComponent_Template_button_click_20_listener() {\n          return ctx.mapDataElement();\n        });\n        i0.ɵɵtext(21);\n        i0.ɵɵelementEnd()()()()();\n      }\n\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(13);\n\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.flowKeyService.form);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", \"Map DHIS2 Data Element\", \" \");\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"formControl\", ctx.myControl)(\"matAutocomplete\", _r1);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"displayWith\", ctx.displayFn);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(15, 7, ctx.filteredOptions));\n        i0.ɵɵadvance(7);\n        i0.ɵɵtextInterpolate1(\" \", \"MAP\", \" \");\n      }\n    },\n    directives: [i5.DefaultLayoutDirective, i5.FlexFillDirective, i5.DefaultLayoutAlignDirective, i6.ɵNgNoValidate, i6.NgControlStatusGroup, i6.FormGroupDirective, i2.MatDialogTitle, i7.MatDivider, i2.MatDialogContent, i5.DefaultLayoutGapDirective, i8.MatFormField, i8.MatLabel, i9.MatInput, i6.DefaultValueAccessor, i10.MatAutocompleteTrigger, i6.NgControlStatus, i6.FormControlDirective, i10.MatAutocomplete, i11.NgForOf, i12.MatOption, i2.MatDialogActions, i13.MatButton, i2.MatDialogClose],\n    pipes: [i11.AsyncPipe],\n    styles: [\".form[_ngcontent-%COMP%]{width:500px}.dialog-header[_ngcontent-%COMP%]{margin-bottom:0}.dialog-content[_ngcontent-%COMP%]{margin-top:10px}.button[_ngcontent-%COMP%]{margin:5px}\"]\n  });\n  return FlowKeyDialogComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}