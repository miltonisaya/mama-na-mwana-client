{"ast":null,"code":"import { of } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport const BASE_URL = environment.baseURL;\nexport const RESOURCE_URL = 'api/v1/roles';\nexport let RolesService = /*#__PURE__*/(() => {\n  class RolesService {\n    constructor(http) {\n      this.http = http;\n      this.API_ENDPOINT = `${BASE_URL}/${RESOURCE_URL}`;\n      this.form = new FormGroup({\n        id: new FormControl(''),\n        name: new FormControl('', [Validators.required]),\n        description: new FormControl('', [Validators.required])\n      });\n    }\n    /**\n     * helper function to extract data since\n     * we are not using a type checker in the request\n     * @returns Observable\n     *\n     * @param res\n     */\n\n\n    extractData(res) {\n      const body = res;\n      return body || {};\n    }\n\n    getRoles(param) {\n      return this.http.get(this.API_ENDPOINT, {\n        params: param\n      }).pipe(map(this.extractData));\n    }\n    /**\n     *\n     * @param id\n     */\n\n\n    delete(id) {\n      console.log(\"Deleting role with id \", id);\n      return this.http.delete(this.API_ENDPOINT + \"/\" + id).pipe(map(this.extractData));\n      ``;\n    }\n    /**\n     *\n     * @param data\n     */\n\n\n    populateForm(data) {\n      this.form.setValue(data);\n    }\n\n    initializeFormGroup() {\n      return this.form.setValue({\n        id: '',\n        name: '',\n        description: ''\n      });\n    }\n    /**\n     * @param role\n     */\n\n\n    createRole(role) {\n      console.log(role);\n      return this.http.post(this.API_ENDPOINT, role) // tslint:disable-next-line:no-shadowed-variable\n      .pipe(tap(response => console.log(`Added role with name = ${role.name}`)), catchError(this.handleError('create objective')));\n    }\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        console.log(`${operation} failed: ${error.message}`);\n        return of(result);\n      };\n    }\n\n    updateRole(role) {\n      console.log(role);\n      return this.http.put(this.API_ENDPOINT + \"/\" + role.id, role).pipe(tap(_ => console.log(`updated role with id=${role.id}`)), catchError(this.handleError('update role')));\n    }\n\n  }\n\n  RolesService.ɵfac = function RolesService_Factory(t) {\n    return new (t || RolesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  RolesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RolesService,\n    factory: RolesService.ɵfac\n  });\n  return RolesService;\n})();","map":null,"metadata":{},"sourceType":"module"}